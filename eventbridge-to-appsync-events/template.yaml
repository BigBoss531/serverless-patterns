AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless patterns - EventBridge to AppSync Events API integration
Parameters:
  EventsApiHttpURL: 
    Type: String
    MinLength: '1'
    MaxLength: '512'
    Default: 'https://{{your-api-id}}.appsync-api.{{region}}.amazonaws.com'
  EventsApiAPIKey: 
    Type: String
    MinLength: '1'
    MaxLength: '512'
    Default: '{{your-api-key}}'
Resources:
  DLQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-DLQ
  DLQPolicy:
    Type: AWS::SQS::QueuePolicy  
    Properties:
      Queues:
        - !Ref DLQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt DLQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ServerlessPatternsSendToEventsAPI.Arn
  # This is the destination we want to send events to. We will use our HTTP endpoint for the Events API. 
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Description: This is for demonstrating the Serverless pattern for publishing messages from EventBridge to AppSync Events API.
      Name:  !Sub ${AWS::StackName}-EventBridge-to-EventsAPI
  EventsAPIDestination:
    Type: AWS::Events::ApiDestination
    Properties:
      ConnectionArn:
        Fn::GetAtt:
          - EventsAPIConnectionDetails
          - Arn
      HttpMethod: POST
      InvocationEndpoint: 
        Fn::Sub: "${EventsApiHttpURL}/event"       
      InvocationRateLimitPerSecond: 3 # Adjust this accordingly, set low for the demo.
      Name:  !Sub ${AWS::StackName}-EventsApiDestination
  EventsAPIConnectionDetails:
    Type: AWS::Events::Connection
    Properties:
      Name: !Sub ${AWS::StackName}-Connection
      AuthorizationType: API_KEY
      AuthParameters:
        ApiKeyAuthParameters:
          ApiKeyName: x-api-key
          ApiKeyValue:
            Ref: EventsApiAPIKey  
  RoleToAllowEventBridgePublish:
    Type: AWS::IAM::Role
    Properties:
      RoleName:  !Sub ${AWS::StackName}-EventBridge-Rule-Target
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      MaxSessionDuration: 3600
      Tags: []
  PolicyToAllowInvokeDestination:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyName:  !Sub ${AWS::StackName}-Invoke_Api_Destination
      RoleName:
        Ref: RoleToAllowEventBridgePublish
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - events:InvokeApiDestination
            Resource:
              - Fn::Sub: arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:api-destination/${EventsAPIDestination}/*  
  ServerlessPatternsSendToEventsAPI:
    Type: AWS::Events::Rule
    DependsOn:
      - EventsAPIDestination
      - RoleToAllowEventBridgePublish
      - PolicyToAllowInvokeDestination
    Properties:
      Name:  !Sub ${AWS::StackName}-EventBridgeToEventsApi
      EventPattern: !Sub '{"account":["${AWS::AccountId}"], "detail-type": ["serverless-patterns"]}'      
      EventBusName: !Ref EventBus
      Targets:
        - Id: !Sub ${AWS::StackName}-TargetEventsAPI
          Arn:
            Fn::GetAtt:
              - EventsAPIDestination
              - Arn
          RoleArn:
            Fn::GetAtt:
              - RoleToAllowEventBridgePublish
              - Arn
          InputTransformer:
            InputPathsMap:
              detailType: $.detail-type
              region: $.region
              message: $.detail.message
            InputTemplate: |+ 
              {
                  "channel": "default/serverless-patterns",
                  "events": [
                    "{\"detailType\":\"<detailType>\",\"region\":\"<region>\",\"message\":\"<message>\"}"
                    ]
              }            
          DeadLetterConfig:
            Arn: !GetAtt DLQueue.Arn
          RetryPolicy:
            MaximumRetryAttempts: 2
            MaximumEventAgeInSeconds: 60


# List all common outputs for usage
Outputs:
  EventBusName:
    Value:
      Fn::Sub: "${EventBus.Name}"